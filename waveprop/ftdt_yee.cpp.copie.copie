#include <iostream>
#include <vector>
#include <mutex>
#include <thread>
#include <math.h>
#include <future>

const int n = 5;
const float courant = 0.1;

namespace {
    std::mutex mutex;

}

//source strenght through time
float power_source(int index)
{
    return (float)0.1*sin((double)0.1*index);
}

//wave propagation in all matrice
std::vector<std::vector<std::vector<float>>> propagation_H(std::vector<std::vector<std::vector<float>>> curl_H)
{
    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 0; z < n; z++)
            {
                curl_H[x][y][z] += curl_H[x][y][z] * courant;
            }
        }
    }
    lock.unlock();

    return curl_H;
}

std::vector<std::vector<std::vector<float>>> propagation_E(std::vector<std::vector<std::vector<float>>> curl_E)
{
    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 0; z < n; z++)
            {
                curl_E[x][y][z] -= curl_E[x][y][z] * courant;
            }
        }
    }
    lock.unlock();

    return curl_E;
}

//add two matrice
std::vector<std::vector<std::vector<float>>> somme_matrice(std::vector<std::vector<std::vector<float>>> somme,
                                                            std::vector<std::vector<std::vector<float>>> a,
                                                            std::vector<std::vector<std::vector<float>>> b)
{
    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 0; z < n; z++)
            {
                somme[x][y][z] += a[x][y][z] - b[x][y][z];
            }
        }
    }
    lock.unlock();

    return somme;
}

/********************************** curl E **********************************/

/*
1
curl_E[:, :-1, :, 0] += E[:, 1:, :, 2] - E[:, :-1, :, 2]
*/
std::vector<std::vector<std::vector<float>>> line_curl_E_1(std::vector<std::vector<std::vector<float>>> f)
{
    std::vector<std::vector<std::vector<float>>> retour = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));

    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 0; y < n-1; y++)
        {
            for(int z = 0; z < n; z++)
            {
                retour[x][y][z] = f[x][y+1][z] - f[x][y][z];
            }
        }
    }
    lock.unlock();

    return retour;
}

/*
2
curl_E[:, :, :-1, 0] -= E[:, :, 1:, 1] - E[:, :, :-1, 1]
*/
std::vector<std::vector<std::vector<float>>> line_curl_E_2(std::vector<std::vector<std::vector<float>>> f)
{
    std::vector<std::vector<std::vector<float>>> retour = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));

    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 0; z < n-1; z++)
            {
                retour[x][y][z] -= f[x][y][z+1] - f[x][y][z];
            }
        }
    }
    lock.unlock();

    return retour;
}

/*
3
curl_E[:, :, :-1, 1] += E[:, :, 1:, 0] - E[:, :, :-1, 0]
*/
std::vector<std::vector<std::vector<float>>> line_curl_E_3(std::vector<std::vector<std::vector<float>>> f)
{
    std::vector<std::vector<std::vector<float>>> retour = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));

    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 0; z < n-1; z++)
            {
                retour[x][y][z] += f[x][y][z+1] - f[x][y][z];
            }
        }
    }
    lock.unlock();

    return retour;
}

/*
4
curl_E[:-1, :, :, 1] -= E[1:, :, :, 2] - E[:-1, :, :, 2]
*/
std::vector<std::vector<std::vector<float>>> line_curl_E_4(std::vector<std::vector<std::vector<float>>> f)
{
    std::vector<std::vector<std::vector<float>>> retour = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));

    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n-1; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 0; z < n; z++)
            {
                retour[x][y][z] -= f[x+1][y][z] - f[x][y][z];
            }
        }
    }
    lock.unlock();

    return retour;
}

/*
5
curl_E[:-1, :, :, 2] += E[1:, :, :, 1] - E[:-1, :, :, 1]
*/
std::vector<std::vector<std::vector<float>>> line_curl_E_5(std::vector<std::vector<std::vector<float>>> f)
{
    std::vector<std::vector<std::vector<float>>> retour = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));

    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n-1; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 0; z < n; z++)
            {
                retour[x][y][z] += f[x+1][y][z] - f[x][y][z];
            }
        }
    }
    lock.unlock();

    return retour;
}

/*
6
curl_E[:, :-1, :, 2] -= E[:, 1:, :, 0] - E[:, :-1, :, 0]
*/
std::vector<std::vector<std::vector<float>>> line_curl_E_6(std::vector<std::vector<std::vector<float>>> f)
{
    std::vector<std::vector<std::vector<float>>> retour = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));

    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 0; y < n-1; y++)
        {
            for(int z = 0; z < n; z++)
            {
                retour[x][y][z] -= f[x][y+1][z] - f[x][y][z];
            }
        }
    }
    lock.unlock();

    return retour;
}

/********************************** curl H **********************************/

/*
1
curl_H[:, :1, :, 0] += E[:, 1:, :, 2] - E[:, :-1, :, 2]
*/
void line_curl_H_1(std::vector<std::vector<std::vector<float>>> f, std::vector<std::vector<std::vector<float>>> retour)
{
    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 1; y < n; y++)
        {
            for(int z = 0; z < n; z++)
            {
                retour[x][y][z] = f[x][y][z] - f[x][y-1][z];
            }
        }
    }
    lock.unlock();
}

/*
2
curl_E[:, :, :1, 0] -= E[:, :, 1:, 1] - E[:, :, :-1, 1]
*/
void line_curl_H_2(std::vector<std::vector<std::vector<float>>> f, std::vector<std::vector<std::vector<float>>> retour)
{
    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 1; z < n; z++)
            {
                retour[x][y][z] -= f[x][y][z] - f[x][y][z-1];
            }
        }
    }
    lock.unlock();
}

/*
3
curl_E[:, :, :1, 1] += E[:, :, 1:, 0] - E[:, :, :-1, 0]
*/
void line_curl_H_3(std::vector<std::vector<std::vector<float>>> f, std::vector<std::vector<std::vector<float>>> retour)
{
    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 1; z < n; z++)
            {
                retour[x][y][z] += f[x][y][z] - f[x][y][z-1];
            }
        }
    }
    lock.unlock();
}

/*
4
curl_E[1:, :, :, 1] -= E[1:, :, :, 2] - E[:-1, :, :, 2]
*/
void line_curl_H_4(std::vector<std::vector<std::vector<float>>> f, std::vector<std::vector<std::vector<float>>> retour)
{
    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 1; x < n; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 0; z < n; z++)
            {
                retour[x][y][z] -= f[x][y][z] - f[x-1][y][z];
            }
        }
    }
    lock.unlock();
}

/*
5
curl_E[1:, :, :, 2] += E[1:, :, :, 1] - E[:-1, :, :, 1]
*/
void line_curl_H_5(std::vector<std::vector<std::vector<float>>> f, std::vector<std::vector<std::vector<float>>> retour)
{
    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 1; x < n; x++)
    {
        for(int y = 0; y < n; y++)
        {
            for(int z = 0; z < n; z++)
            {
                retour[x][y][z] += f[x][y][z] - f[x-1][y][z];
            }
        }
    }
    lock.unlock();
}

/*
6
curl_E[:, 1:, :, 2] -= E[:, 1:, :, 0] - E[:, :-1, :, 0]
*/
void line_curl_H_6(std::vector<std::vector<std::vector<float>>> f, std::vector<std::vector<std::vector<float>>> retour)
{
    std::unique_lock<std::mutex> lock(mutex);
    for(int x = 0; x < n; x++)
    {
        for(int y = 1; y < n; y++)
        {
            for(int z = 0; z < n; z++)
            {
                retour[x][y][z] += f[x][y][z] - f[x][y-1][z];
            }
        }
    }
    lock.unlock();
}

int main()
{
    std::vector<std::vector<std::vector<float>>> f0_E;
    f0_E = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> f1_E;
    f1_E = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> f2_E;
    f2_E = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));

    std::vector<std::vector<std::vector<float>>> f0_H;
    f0_H = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> f1_H;
    f1_H = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> f2_H;
    f2_H = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));


    std::vector<std::vector<std::vector<float>>> k1 = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> k2 = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> k3 = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> k4 = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> k5 = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> k6 = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> k7 = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));
    std::vector<std::vector<std::vector<float>>> k8 = std::vector<std::vector<std::vector<float>>>(100, std::vector<std::vector<float>>(100, std::vector<float>(100)));

    int source_position_x = floor(n / 3);
    int source_position_y = floor(n / 3);
    int source_position_z = floor(n / 2);
    int index = 0;

    std::cout.precision(4);

    f0_E[3][3][3] = 10;
 
        k1 = line_curl_E_1(f2_E);
        k2 = line_curl_E_2(f1_E);
        f0_E = somme_matrice(f0_E, k1, k2);

        k1 = line_curl_E_3(f0_E); 
        k2 = line_curl_E_4(f2_E);
        f1_E = somme_matrice(f1_E, k1, k2);

        k1 = line_curl_E_5(f1_E);
        k2 = line_curl_E_6(f0_E);
        f2_E = somme_matrice(f2_E, k1, k2);

        std::cout << f1_E[3][3][3] << std::endl;

        //increase in time
        //f0_E[source_position_x][source_position_y][source_position_z] += power_source(index);

        //index++;

        /*f0_E = propagation_E(f0_E);
        f1_E = propagation_E(f1_E);
        f2_E = propagation_E(f2_E);*/ 
    /*while(true)
    {
        std::cout << f0_E[source_position_x+3][source_position_y][source_position_z] << std::endl;
      

        //premiere section
        std::thread t1(line_curl_E_1, f2_E, k1);
        std::thread t2(line_curl_E_2, f1_E, k2);

        std::thread t3(line_curl_H_1, f2_H, k3);
        std::thread t4(line_curl_H_2, f1_H, k4);

        t1.join();
        t2.join();
        t3.join();
        t4.join();

        //somme premiere section
        std::thread t5(somme_matrice, f0_E, k1, k2);
        std::thread t6(somme_matrice, f0_H, k3, k4);

        //deuxieme section
        std::thread t7(line_curl_E_3, f0_E, k5);
        std::thread t8(line_curl_E_4, f2_E, k6);

        std::thread t9(line_curl_H_3, f0_H, k7);
        std::thread t10(line_curl_H_4, f2_H, k8);

        t5.join();
        t6.join();
        t7.join();
        t8.join();
        t9.join();
        t10.join();

        //somme deuxieme section
        std::thread t11(somme_matrice, f1_E, k5, k6);
        std::thread t12(somme_matrice, f1_H, k7, k8);

        //troisieme section
        std::thread t13(line_curl_E_5, f1_E, k1);
        std::thread t14(line_curl_E_6, f0_E, k2);

        std::thread t15(line_curl_H_5, f1_H, k3);
        std::thread t16(line_curl_H_6, f0_H, k4);

        t11.join();
        t12.join();
        t13.join();
        t14.join();
        t15.join();
        t16.join();

        //somme troisieme section
        std::thread t17(somme_matrice, f2_E, k1, k2);
        std::thread t18(somme_matrice, f2_H, k3, k4);

        t17.join();
        t18.join();
        std::cout << f0_E[source_position_x+3][source_position_y][source_position_z] << std::endl;

        std::thread t_H_0(propagation_H, f0_H);
        std::thread t_H_1(propagation_H, f1_H);
        std::thread t_H_2(propagation_H, f2_H);

        t_H_0.join();
        t_H_1.join();
        t_H_2.join();

        std::thread t_E_0(propagation_E, f0_E);
        std::thread t_E_1(propagation_E, f1_E);
        std::thread t_E_2(propagation_E, f2_E);

        //increase in time
        index++;
        f0_E[source_position_x][source_position_y][source_position_z] += power_source(index);

        t_E_0.join();
        t_E_1.join();
        t_E_2.join();
    }*/

    return 0;
}